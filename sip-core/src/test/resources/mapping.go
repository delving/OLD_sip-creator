package main

/////////////////////////////////////////////////////////////////
//Code generated by chidley https://github.com/gnewton/chidley //
/////////////////////////////////////////////////////////////////

import (
	"bufio"
	"compress/bzip2"
	"compress/gzip"
	"encoding/json"
	"encoding/xml"
	"flag"
	"fmt"
	"io"
	"log"
	"math"
	"os"
	"strings"
)

const (
	JsonOut = iota
	XmlOut
	CountAll
)

var toJson bool = false
var toXml bool = false
var oneLevelDown bool = false
var countAll bool = false
var musage bool = false

var uniqueFlags = []*bool{
	&toJson,
	&toXml,
	&countAll}

var filenames = [1]string{"/home/kiivihal/src/kokoro/narthex-sip-creator/sip-core/src/test/resources/mapping_edm.xml"}

func init() {

	flag.BoolVar(&toJson, "j", toJson, "Convert to JSON")
	flag.BoolVar(&toXml, "x", toXml, "Convert to XML")
	flag.BoolVar(&countAll, "c", countAll, "Count each instance of XML tags")
	flag.BoolVar(&oneLevelDown, "s", oneLevelDown, "Stream XML by using XML elements one down from the root tag. Good for huge XML files (see http://blog.davidsingleton.org/parsing-huge-xml-files-with-go/")
	flag.BoolVar(&musage, "h", musage, "Usage")
	//flag.StringVar(&filename, "f", filename, "XML file or URL to read in")

	flag.Int64Var(&recordLimit, "n", recordLimit, "Limit # records output")
}

var out int = -1

var counters map[string]*int

var recordLimit int64 = int64(math.MaxInt64)
var recordCounter = int64(0)

func main() {
	flag.Parse()

	if musage {
		flag.Usage()
		return
	}

	numSetBools, outFlag := numberOfBoolsSet(uniqueFlags)
	if numSetBools == 0 {
		flag.Usage()
		return
	}

	if numSetBools != 1 {
		flag.Usage()
		log.Fatal("Only one of ", uniqueFlags, " can be set at once")
	}

	counter := 0
	stop := false
	counters = make(map[string]*int)
	for i, _ := range filenames {
		filename := filenames[i]
		reader, xmlFile, err := genericReader(filename)
		if err != nil {
			log.Fatal(err)
			return
		}

		decoder := xml.NewDecoder(reader)

		for {
			if stop {
				break
			}
			token, _ := decoder.Token()
			if token == nil {
				break
			}
			switch se := token.(type) {
			case xml.StartElement:
				counter++
				handleFeed(se, decoder, outFlag)
				if recordCounter == recordLimit {
					stop = true
				}
			}

		}
		if stop {
			break
		}
		if xmlFile != nil {
			defer xmlFile.Close()
		}
	}
	if countAll {
		for k, v := range counters {
			fmt.Println(*v, k)
		}
	}
}

func handleFeed(se xml.StartElement, decoder *xml.Decoder, outFlag *bool) {
	if outFlag == &countAll {
		incrementCounter(se.Name.Space, se.Name.Local)
	} else {
		if !oneLevelDown {
			if se.Name.Local == "rec-mapping" && se.Name.Space == "" {
				var item Crec_dash_mapping
				decoder.DecodeElement(&item, &se)
				switch outFlag {
				case &toJson:
					writeJson(item)
				case &toXml:
					writeXml(item)
				}
			}
		} else {

			if se.Name.Local == "functions" && se.Name.Space == "" {
				recordCounter++
				var item Cfunctions
				decoder.DecodeElement(&item, &se)
				switch outFlag {
				case &toJson:
					writeJson(item)
				case &toXml:
					writeXml(item)
				}
			}

			if se.Name.Local == "dyn-opts" && se.Name.Space == "" {
				recordCounter++
				var item Cdyn_dash_opts
				decoder.DecodeElement(&item, &se)
				switch outFlag {
				case &toJson:
					writeJson(item)
				case &toXml:
					writeXml(item)
				}
			}

			if se.Name.Local == "node-mappings" && se.Name.Space == "" {
				recordCounter++
				var item Cnode_dash_mappings
				decoder.DecodeElement(&item, &se)
				switch outFlag {
				case &toJson:
					writeJson(item)
				case &toXml:
					writeXml(item)
				}
			}

			if se.Name.Local == "facts" && se.Name.Space == "" {
				recordCounter++
				var item Cfacts
				decoder.DecodeElement(&item, &se)
				switch outFlag {
				case &toJson:
					writeJson(item)
				case &toXml:
					writeXml(item)
				}
			}

		}
	}
}

func makeKey(space string, local string) string {
	if space == "" {
		space = "_"
	}
	return space + ":" + local
}

func incrementCounter(space string, local string) {
	key := makeKey(space, local)

	counter, ok := counters[key]
	if !ok {
		n := 1
		counters[key] = &n
	} else {
		newv := *counter + 1
		counters[key] = &newv
	}
}

func writeJson(item interface{}) {
	b, err := json.MarshalIndent(item, "", " ")
	if err != nil {
		log.Fatal(err)
	}
	fmt.Println(string(b))
}

func writeXml(item interface{}) {
	output, err := xml.MarshalIndent(item, "  ", "    ")
	if err != nil {
		fmt.Printf("error: %v\n", err)
	}
	os.Stdout.Write(output)
}

func genericReader(filename string) (io.Reader, *os.File, error) {
	if filename == "" {
		return bufio.NewReader(os.Stdin), nil, nil
	}
	file, err := os.Open(filename)
	if err != nil {
		return nil, nil, err
	}
	if strings.HasSuffix(filename, "bz2") {
		return bufio.NewReader(bzip2.NewReader(bufio.NewReader(file))), file, err
	}

	if strings.HasSuffix(filename, "gz") {
		reader, err := gzip.NewReader(bufio.NewReader(file))
		if err != nil {
			return nil, nil, err
		}
		return bufio.NewReader(reader), file, err
	}
	return bufio.NewReader(file), file, err
}

func numberOfBoolsSet(a []*bool) (int, *bool) {
	var setBool *bool
	counter := 0
	for i := 0; i < len(a); i++ {
		if *a[i] {
			counter += 1
			setBool = a[i]
		}
	}
	return counter, setBool
}

///////////////////////////
/// structs
///////////////////////////

type Cdyn_dash_opt struct {
	XMLName   xml.Name `xml:"dyn-opt,omitempty" json:"dyn-opt,omitempty"`
	Attrpath  string   `xml:"path,attr"  json:",omitempty"`
	Attrvalue string   `xml:"value,attr"  json:",omitempty"`
}

type Cdyn_dash_opts struct {
	XMLName       xml.Name         `xml:"dyn-opts,omitempty" json:"dyn-opts,omitempty"`
	Cdyn_dash_opt []*Cdyn_dash_opt `xml:"dyn-opt,omitempty" json:"dyn-opt,omitempty"`
}

type Centry struct {
	XMLName xml.Name   `xml:"entry,omitempty" json:"entry,omitempty"`
	Cstring []*Cstring `xml:"string,omitempty" json:"string,omitempty"`
}

type Cfacts struct {
	XMLName xml.Name  `xml:"facts,omitempty" json:"facts,omitempty"`
	Centry  []*Centry `xml:"entry,omitempty" json:"entry,omitempty"`
}

type Cfunctions struct {
	XMLName                xml.Name                  `xml:"functions,omitempty" json:"functions,omitempty"`
	Cmapping_dash_function []*Cmapping_dash_function `xml:"mapping-function,omitempty" json:"mapping-function,omitempty"`
}

type Cgroovy_dash_code struct {
	XMLName xml.Name   `xml:"groovy-code,omitempty" json:"groovy-code,omitempty"`
	Cstring []*Cstring `xml:"string,omitempty" json:"string,omitempty"`
}

type Cmapping_dash_function struct {
	XMLName            xml.Name            `xml:"mapping-function,omitempty" json:"mapping-function,omitempty"`
	Attrname           string              `xml:"name,attr"  json:",omitempty"`
	Cgroovy_dash_code  *Cgroovy_dash_code  `xml:"groovy-code,omitempty" json:"groovy-code,omitempty"`
	Csample_dash_input *Csample_dash_input `xml:"sample-input,omitempty" json:"sample-input,omitempty"`
}

type Cnode_dash_mapping struct {
	XMLName           xml.Name           `xml:"node-mapping,omitempty" json:"node-mapping,omitempty"`
	AttrinputPath     string             `xml:"inputPath,attr"  json:",omitempty"`
	AttroutputPath    string             `xml:"outputPath,attr"  json:",omitempty"`
	Cgroovy_dash_code *Cgroovy_dash_code `xml:"groovy-code,omitempty" json:"groovy-code,omitempty"`
}

type Cnode_dash_mappings struct {
	XMLName            xml.Name              `xml:"node-mappings,omitempty" json:"node-mappings,omitempty"`
	Cnode_dash_mapping []*Cnode_dash_mapping `xml:"node-mapping,omitempty" json:"node-mapping,omitempty"`
}

type Crec_dash_mapping struct {
	XMLName             xml.Name             `xml:"rec-mapping,omitempty" json:"rec-mapping,omitempty"`
	Attrlocked          string               `xml:"locked,attr"  json:",omitempty"`
	Attrprefix          string               `xml:"prefix,attr"  json:",omitempty"`
	AttrschemaVersion   string               `xml:"schemaVersion,attr"  json:",omitempty"`
	Cdyn_dash_opts      *Cdyn_dash_opts      `xml:"dyn-opts,omitempty" json:"dyn-opts,omitempty"`
	Cfacts              *Cfacts              `xml:"facts,omitempty" json:"facts,omitempty"`
	Cfunctions          *Cfunctions          `xml:"functions,omitempty" json:"functions,omitempty"`
	Cnode_dash_mappings *Cnode_dash_mappings `xml:"node-mappings,omitempty" json:"node-mappings,omitempty"`
}

type Csample_dash_input struct {
	XMLName xml.Name   `xml:"sample-input,omitempty" json:"sample-input,omitempty"`
	Cstring []*Cstring `xml:"string,omitempty" json:"string,omitempty"`
}

type Cstring struct {
	XMLName xml.Name `xml:"string,omitempty" json:"string,omitempty"`
	Text    string   `xml:",chardata" json:",omitempty"`
}

///////////////////////////
